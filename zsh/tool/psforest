#!/usr/bin/env python
#
# Copyright (C) distroy
#


import commands
import os
import platform
import re
import sys


def get_tty_size(w=25, h=80):
    def ioctl_gwinsz(fd):
        try:
            import fcntl
            import termios
            import struct
            cr = struct.unpack('hh', fcntl.ioctl(fd, termios.TIOCGWINSZ, '1234'))
        except:
            return
        return cr
    cr = ioctl_gwinsz(0) or ioctl_gwinsz(1) or ioctl_gwinsz(2)
    import os
    if not cr:
        try:
            fd = os.open(os.ctermid(), os.O_RDONLY)
            cr = ioctl_gwinsz(fd)
            os.close(fd)
        except:
            pass
    if not cr:
        env = os.environ
        cr = (env.get('LINES', w), env.get('COLUMNS', h))
    return int(cr[1]), int(cr[0])


def get_str_width(s):
    u = s.decode('utf-8')
    w = 0
    for uchar in u:
        if uchar >= u'\u4e00' and uchar <= u'\u9fa5':
            # if unicode is a chinese
            w += 2
        elif uchar >= u'\u0030' and uchar <= u'\u0039':
            # if unicode is a number
            w += 1
        elif (uchar >= u'\u0041' and uchar <= u'\u005a') or (uchar >= u'\u0061' and uchar <= u'\u007a'):
            # if unicode is a english letter
            w += 1
        else:
            w += 1
    return len(s), w


def get_width_str(s, width):
    # return s[: width]
    u = s.decode('utf-8')
    w = 0
    l = 0
    for uchar in u:
        if uchar >= u'\u4e00' and uchar <= u'\u9fa5':
            w += 2
        else:
            w += 1

        if w <= width:
            l += 1
        if w >= width:
            break
    u = u[:l]
    return u.encode('utf-8')


class Psforest(object):
    _RIGHT_FIELDS = ()

    _DEFAULT_ARGS = [
        'ps',
    ]

    def __init__(self):
        pass

    def _get_exec_args(self, argv):
        args = self._DEFAULT_ARGS[:]
        args.extend(argv)
        return args

    def _is_right_field(self, k, v):
        return v.isdigit() or k in self._RIGHT_FIELDS

    def _is_line_show(self, info):
        return True

    def _parse_head(self, line):
        return line.split()

    def _parse_line(self, line, head):
        s = len(head)
        l = line.split()
        c = ' '.join(l[s - 1:])
        l = l[: s - 1]
        l.append(c)
        return l

    def __init_tty(self):
        if sys.stdout.isatty():
            self.__ttyw, self.__ttyh = get_tty_size(None, None)
        else:
            self.__ttyw = None
            self.__ttyh = None

    def __stdout(self, fmt, *args):
        try:
            sys.stdout.write(fmt % tuple(args))
        except IOError:
            pass

    def __stderr(self, fmt, *args):
        try:
            sys.stderr.write(fmt % tuple(args))
        except IOError:
            pass

    def __get_bcmd(self, line, width):
        buff = []
        for i in range(len(self.__widths) - 1):
            w = self.__widths[i] - width[i]
            # print w
            if self.__types[i]:
                buff.append(' ' * w + line[i])
            else:
                buff.append(line[i] + ' ' * w)
        buff.append('')
        return ' '.join(buff)

    def __get_cmd(self, cmd):
        return cmd

    def __get_depth(self, depth):
        buff = []
        for i in range(0, len(depth) - 1):
            if depth[i]:
                buff.append(' |  ')
            else:
                buff.append('    ')
        if len(depth):
            buff.append(' \_ ')
        return ''.join(buff)

    def __make_tree(self):
        for proc in self.__lines:
            ppid = proc['info']['PPID']

            if ppid in self.__tree.keys():
                parent = self.__tree[ppid]
                parent['childs'].append(proc)
                proc['root'] = 0

    def __print_line(self, text):
        s = text
        if self.__ttyw:
            s = get_width_str(s, self.__ttyw)
        self.__stdout('%s\r\n', s)

    def __print_tree(self):
        self.__print_head()
        for proc in self.__lines:
            if not proc['root']:
                continue

            self.__print_subtree(proc)

    def __print_head(self):
        text = self.__head['text']
        buff = []
        buff.append(self.__get_bcmd(text, self.__head['width']))
        buff.append(self.__get_cmd(text[-1]))
        self.__print_line(''.join(buff))

    def __print_subtree(self, root, depth=[]):
        text = root['text']
        childs = root['childs']

        buff = []
        buff.append(self.__get_bcmd(text, root['width']))
        buff.append(self.__get_depth(depth))
        buff.append(self.__get_cmd(text[-1]))
        self.__print_line(''.join(buff))

        depth.append(1)
        for i in range(0, len(childs)):
            child = childs[i]
            if i == len(childs) - 1:
                depth[-1] = 0
            self.__print_subtree(child, depth)
        depth.pop()

    def __parse_head(self, line):
        text = getattr(self, '_parse_head')(line)

        self.__lines = []
        self.__tree = {}

        self.__widths = []
        self.__types = []
        widths = []
        for i in text:
            l, w = get_str_width(i)
            widths.append(w)
            self.__widths.append(w)
            self.__types.append(True)

        self.__head = {'text': text, 'width': widths}

    def __parse_line(self, line):
        text = getattr(self, '_parse_line')(line, self.__head['text'])
        info = {}
        widths = []
        for i in range(0, len(self.__head['text'])):
            k = self.__head['text'][i]
            v = text[i]
            l, w = get_str_width(v)
            widths.append(w)

            info[k] = v
            if w > self.__widths[i]:
                self.__widths[i] = w

            if not getattr(self, '_is_right_field')(k, v):
                self.__types[i] = False

        if not getattr(self, '_is_line_show')(info):
            return

        proc = {'info': info, 'childs': [], 'root': 1, 'text': text, 'width': widths}
        pid = info['PID']

        self.__tree[pid] = proc
        self.__lines.append(proc)

    def run(self):
        self.__init_tty()

        args = getattr(self, '_get_exec_args')(sys.argv[1:])
        cmd = ' '.join(args)
        (ret, output) = commands.getstatusoutput(cmd)
        if ret != 0:
            self.__stderr('command: %s\r\n%s', cmd, output)
            return ret

        # self.__stdout('command: %s', cmd)
        # self.__stdout('command: %s\r\n%s\r\n', cmd, output)

        lines = output.split('\n')
        self.__parse_head(lines[0])
        if 'PPID' not in self.__head['text']:
            self.__stdout('%s', output)
            return 0

        self.__tree = {}
        for line in lines[1:]:
            text = self.__parse_line(line)

        self.__make_tree()
        self.__print_tree()

        return 0


class PsforestDarwin(Psforest):
    _RIGHT_FIELDS = ('STARTED', '%CPU')

    _DEFAULT_ARGS = [
        'ps',
        '-ouser',
        '-opid',
        '-oppid',
        '-opgid',
        '-osess',
        '-otty',
        '-o%cpu',
        '-ostat',
        '-ostart',
        '-ocputime',
        '-ocommand',
    ]

    __EXEC_FILTER = (
        '/Applications/',
        '/Library/Application Support/',
        '/Library/Frameworks/',
        '/System/Library/',
        '/usr/libexec/',
    )

    _opt_all_proc = False

    def __init__(self):
        super(Psforest, self).__init__()
        self._RE_TIME = re.compile('\d+:\d+.\d+')

    def _is_line_show(self, info):
        if self._opt_all_proc:
            return True
        cmd = info['COMMAND']
        if cmd.startswith(self.__EXEC_FILTER):
            return False
        return True

    def _get_exec_args(self, argv):
        for i in argv:
            if i[0] != '-':
                continue
            if [1] == '-':
                continue

            if i.find('e') >= 0:
                self._opt_all_proc = True

        args = self._DEFAULT_ARGS[:]
        args.extend(argv)
        return args

    def _parse_line(self, line, head):
        s = len(head)
        l = line.split()
        if self._RE_TIME.match(l[s - 2]):
            c = ' '.join(l[s - 1:])
        else:
            c = ' '.join(l[s:])
            l[s - 3] += ' ' + l[s - 2]
            l[s - 2] = l[s - 1]
        l = l[: s - 1]
        l.append(c)
        return l


class PsforestCygwin(Psforest):
    _PARSE_WIDTHS = [1, 8, 8, 8, 11, 7, 11, 9]
    _pid_idx = -1

    def _is_right_field(self, k, v):
        return True

    def _parse_line(self, line, head):
        text = self._parse_head(line)
        if self._pid_idx == -1 and 'PID' in head:
            self._pid_idx = head.index('PID')

        if self._pid_idx != -1:
            pid = text[self._pid_idx]
            try:
                fd = os.open('/proc/%s/cmdline' % pid, os.O_RDONLY)
                cmd = os.read(fd, 2048)
                cmd = cmd.replace('\0', ' ')
                cmd = cmd.replace('\n', ' ')
                if cmd != '<defunct> ':
                    text[-1] = cmd
                os.close(fd)
            except:
                pass
        return text

    def _parse_head(self, line):
        text = []
        start = 0
        for w in self._PARSE_WIDTHS:
            end = start + w
            text.append(line[start: end].lstrip())
            start = end
        text.append(line[start:].lstrip())
        return text


plat_psforest = {
    'cygwin': PsforestCygwin,
    'darwin': PsforestDarwin,
}


def main():
    o = None
    plat = platform.system().lower()
    for k in plat_psforest:
        if plat.find(k.lower()) != -1:
            o = plat_psforest[k]()
            break
    if not o:
        o = Psforest()
    return o.run()


if __name__ == '__main__':
    exit(main())
