#!/usr/bin/python

#
# Copyright (C) distroy
#

import sys
import commands

widths = [1, 8, 8, 8, 11, 6, 8, 9]

def print_bcmd(arr):
    fmt = ''.join(['%%%ds' % i for i in widths]) + ' '
    sys.stdout.write(fmt % tuple(arr[: -1]))

def print_depth(depth):
    for i in range(0, len(depth) - 1):
        fill = "    "
        if depth[i]:
            fill = " |  "
        sys.stdout.write(fill)
    if len(depth):
        fill = " \_ "
        sys.stdout.write(fill)

def print_cmd(cmd):
    sys.stdout.write('%s\n' % cmd)

def parse_line(line):
    l = []

    start = 0
    for w in widths:
        end = start + w
        l.append(line[start: end].lstrip())
        start = end
    l.append(line[start: ].lstrip())

    return l

def print_head(head):
    print_bcmd(head)
    print_cmd(head[-1])

def print_tree(root, depth = []):
    text = root['text']
    childs = root['childs']

    print_bcmd(text)
    print_depth(depth)
    print_cmd(text[-1])

    depth.append(1)
    for i in range(0, len(childs)):
        child = childs[i]
        if i == len(childs) - 1:
            depth.pop()
            depth.append(0)
        print_tree(child, depth)
    depth.pop()

def main():
    cmd = 'ps ' + ' '.join(sys.argv)
    (ret, output) = commands.getstatusoutput(cmd)
    if ret != 0:
        print (output)
        return ret

    lines = output.split("\n")

    head = parse_line(lines[0])
    if 'PPID' not in head:
        print (output)
        return 0

    tree = {}
    list = []

    for i in lines[1:]:
        text = parse_line(i)

        info = {}
        for i in range(0, len(head)):
            info[head[i]] = text[i]

        proc    = {'info': info, 'childs': [], 'root': 1, 'text': text}
        pid     = info['PID']

        tree[pid] = proc
        list.append(proc)

    # make tree
    for proc in list:
        ppid = proc['info']['PPID']

        if ppid in tree.keys():
            parent = tree[ppid]
            parent['childs'].append(proc)
            proc['root'] = 0

    # print head
    print_head(head)
    # print tree
    for proc in list:
        if not proc['root']:
            continue

        print_tree(proc)

    return 0

if __name__ == '__main__':
    r = main()
    exit(r)

